@model dynamic
@using System.Xml;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment hostingEnvironment
@{
    var id = Guid.NewGuid().ToString().Replace("-", "");
    var componentName = $"vue_{id}";
    var fileName = ViewContext.View.Path.Replace(".cshtml", "").Replace("/", "_");
    string wwwrootPath = hostingEnvironment.WebRootPath;
    var vueProps = "";
    if (Model is not null)
    {
        vueProps = Model.ToString();
    }
    var bodyContent = RenderBody().GetString();
    var hasBody = !string.IsNullOrWhiteSpace(bodyContent);
    if (hasBody)
    {
        var path = System.IO.Path.Combine(wwwrootPath, $"js/dist/dom{fileName}.html");
        using (var writer = System.IO.File.CreateText(path))
        {
            writer.Write(bodyContent);
        }
    }
    var scriptDom = Html.RenderScripts("vue").Value;
    var hasScript = !string.IsNullOrWhiteSpace(scriptDom);
    if (hasScript)
    {
        var path = System.IO.Path.Combine(wwwrootPath, $"js/dist/script{fileName}.html");
        using (var writer = System.IO.File.CreateText(path))
        {
            writer.Write(scriptDom);
        }
    }
}
<@componentName @Html.Raw(vueProps)></@componentName>

@using (Html.DefineScripts("DefineVueComponent", false))
{
    <script type="module">
        comps.push(async (axios, defineComponent) => {
            return await addComponent(
                axios,
                defineComponent,
                '@componentName',
                '@hasBody',
                '@hasScript',
                '@Url.Content($"~/js/dist/dom{fileName}.html")',
                '@Url.Content($"~/js/dist/script{fileName}.html")')
        });
    </script>
}